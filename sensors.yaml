# Time sensor
- platform: time_date
  display_options:
    - "time"
# Latest HA version sensor, for notifications of new updates
# based on VDRainer's idea: https://community.home-assistant.io/t/update-notification-automation-not-working/117043/4
- platform: command_line
  name: latest_ha_version
  # this takes the latest home assistant release from pypi
  # that doesn't have a 'b' in the version number.
  # If you want the latest release including beta releases,
  # change the regex pattern from r'homeassistant-[\d.]+.tar'
  # to r'homeassistant-[b\d.]+.tar'
  command: >-
    python3 -c "import requests; import re; start = 'homeassistant-'; end = '.tar.gz'; print(re.findall(start + r'[\d.]+' + end, requests.get('https://pypi.org/simple/homeassistant').text)[-1][len(start):-len(end)])"
  scan_interval: 06:00:00
# Time of day sensor
# To test this template, add .replace(hour=5, minute=15) after t = now().time()
- platform: template
  sensors:
    time_of_day:
      friendly_name: Time of day
      value_template: >-
        {% set t = states('sensor.time') %}
        {% set morning_start = state_attr(
            'input_datetime.morning_start_time', 'timestamp'
          ) | int | timestamp_custom('%H:%M', False)
          %}
        {% set evening_start = state_attr(
            'input_datetime.early_eve_start_time', 'timestamp'
          ) | int | timestamp_custom('%H:%M', False)
        %}
        {% set night_start = state_attr(
            'input_datetime.night_start_time', 'timestamp'
          ) | int | timestamp_custom('%H:%M', False)
        %}
        {% if morning_start <= t < evening_start  %}
          Day
        {% elif evening_start <= t < night_start %}
          Evening
        {% else %}
          Night
        {% endif %}
    evening_auto_time:
      friendly_name: Evening time based on sunset and seasonal offset
      value_template: >-
        {%-set sunset_str = state_attr('sun.sun', 'next_setting') -%}
        {%-set sunset = now().fromisoformat(sunset_str) -%}
        {%-set today = now().replace(tzinfo=None, hour=0, minute=0, second=0, microsecond=0) -%}
        {%-set this_year = strptime('{}'.format(today.year), '%Y') -%}
        {%-set days = today - this_year -%}
        {%-set hour = timedelta(hours=1) -%}
        {%-set year = timedelta(days=365) -%}

        {%-set offset = 1*hour + 1.5*hour * cos(2*pi*days/year) -%}
        {%-set evening_time = sunset + offset -%}
        {{evening_time.strftime('%H:%M')}}
    night_auto_time: # Nachttijd = avondtijd + 1.25u + 0.75u*cos(2Ï€t)
      friendly_name: Night time based on evening time and seasonal offset
      value_template: >-
        {%-set evening_time = strptime(states(sensor.evening_auto_time), '%H:%M') -%}
        {%-set today = now().replace(tzinfo=None, hour=0, minute=0, second=0, microsecond=0) -%}
        {%-set this_year = strptime('{}'.format(today.year), '%Y') -%}
        {%-set days = today - this_year -%}
        {%-set hour = timedelta(hours=1) -%}
        {%-set year = timedelta(days=365) -%}
        
        {%-set offset = 1.25*hour + 0.75*hour*cos(2*pi*days/year) -%}
        {%-set night_time = evening_time + offset -%}
        {{night_time.strftime('%H:%M')}}
    # Sensor to tell if, and if so, at what time light alarm triggers
    lightsalarmtomorrow:
      friendly_name: "Morgen lichtwekker"
      value_template: >-
        {% set wd = now().weekday() %}
        {% if states.input_boolean.wakeup_enabled.state == 'on' %}
          {% if (4 < wd + 1 < 7 or wd + 1 == 2) %}
            {% if states.input_boolean.wakeup_weekend.state == 'on' %}
              {% set alarm = 'on' %}
            {% else %}
              {% set alarm = 'off' %}
            {% endif %}
          {% else %}
            {% set alarm = 'on' %}
          {%endif%}
        {% elif states.input_boolean.wakeup_enabled.state == 'off' %}
          {% set alarm = 'off' %}
        {% else %}
          Unexpected value for states.input_boolean.wakeup_enabled.state
        {% endif %}
        {% if alarm == 'on' %}
          {{states.input_datetime.morning_start_time.state[:5]}}
        {% elif alarm == 'off' %}
          {{alarm}}
        {% else %}
          Unexpected value for alarm
        {% endif %}
    # Additional time sensor: before or after noon
    noon:
      value_template: >-
        {% if (now().strftime("%H")|int) >= 12 %}
          After
        {% else %}
          Before
        {% endif %}
